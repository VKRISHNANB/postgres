Scripts to consolidate database collations.

Firstly, these scripts were written to address our specific needs, so there are a couple points for you to consider.

We've decided to use the standard Windows collation "Latin1_General_CI_AS" instead of the default SQL collation.  Therefore, you'll need to go through each script and change the collation string to the one you've chosen.  Unfortunately, it was hard-coded.  Perhaps these could have been better written to set the collation name as a variable at the beginning of the script.  Since these that I'm sending are our master copies and worked flawlessly for us, I'm not going to change any of the structure.  A simple search for "Latin1" and replace will set you up just fine.

Also, the very first script to run is needed for DMO OLE.  It creates a stored proc called: sp_scriptObject

In our environment, for every instance of SQL, we have a generic database called "DBA_Data".  This is where we keep our "global" stored procs and various routines, such as backup and restore overrides.

You'll need to create an empty database called "DBA_Data".  Otherwise, if you want to change these procs to use another, they'll you'll need to scan the scripts for all instances of "DBA_Data" and change to the name of the database you want to use.

The above SP takes in a number of parameters which define it's location in the DMO hierarchy of the SQL instance.  These are generated automatically with the subsequent scripts, so no need to worry about any of that.  But just so you have an idea on how this works, when an object is referenced in DMO, you can capture a buffer dump of the object, which is the EXACT code used when originally scripting the object.  It's output is the exact same as "Script Object As Create To..."

This is needed because there are likely to be objects which are bound to columns that need to have the collation changed.  With this binding, SQL will NOT allow you to alter the collation.  Therefore, all those bound objects will need to be scripted, dropped, and then re-created.  This script is used to generate the code to re-create those objects that get dropped.

As previously mentioned, there is a caveat with this routine.  If the object is more than 8k in size, the VBScript engine not handle this cleanly and throw an error.  However, if this should occur, it doesn't break the operation.  The error is captured and a print statement of the failed object is printed.  In this case, you simply need to manually script out the object and save the DDL for later use.

Moving on...

Once you have the sp_scriptObject proc in place, if you've changed the container database, you'll need to modify the rest of the scripts to point to the correct database.

At this point, you then have three scripts (plus one) to execute per database.

1. Connect to the source database.

2. Execute the script: Pre-Script_1_DROP_DEPENDENCIES.sql
   This will will not actually drop anything.  It generates the DDL to drop objects.
   The script scans the database for columns which have an incorrect collation and then finds all
   objects which are bound to these columns.  Once this list has been generated, the DDL to drop
   each of these objects is generated.

   Take the output of this script and save it as "[dbname]_post_script_1.sql".  You'll use this later.

3. Still connected to the source database, execute the script: Pre-Script_2_CHANGE_COLLATIONS.sql

   As in the first script, this makes no changes to anything.  This one also finds all the columns
   which have the incorrect collation and generates all the DDL to ALTER the columns to the
   desired collation.

   Take the output of this script and save it as "[dbname]_post_script_2.sql".  You'll use this later.

4. This final script gets a little tricky.
   Still connected to the source database, execute the script: Pre-Script_3_CREATE_DEPENDENCIES.sql

   This script will query all the objects referenced from the first script, and generate the DDL
   needed to re-create them.  So, for each DROP statement produced from step 2 (script 1), a
   corresponding statement will be generated to produce the DDL.

   The statements generated are a series of calls to the sp_createObject() stored proc from step 1
   (script 0).  It will also kick out a "USE DBA_Data | GO" statement, so make sure if you change
   the parent DB for this proc, that this "USE" statement reflects that change.

   Now, the output from executing the above will need to be copy-and-pasted into a new Query window
   and executed.  This could take a few moments to run depending on how many objects need to be scripted.

   The output of this will be the collection of "CREATE [object]" statements to re-create all of the
   objects which need to be dropped before updating the collation.

   IMPORTANT:  Scan this results for any errors.  As described above, any procs larger than 8k in size
               will not get scripted in this step.  Locate and manually script out any objects that
               may have failed here.

   Once you have this final output, save it as "[dbname]_post_script_3.sql".  You'll use this later.


End result, you will have three scripts to execute against the database.  This will consolidate
ALL of your collations to the one specified in the code.

Once you have your target database set up, execute each of the above three (post) scripts in
succession against the target.

The first will drop all objects bound to columns which require changes.
The second will alter all columns which need to be created.
The thrid will re-create all the objects dropped in the first script.

Also note:  These scripts were designed for our specific needs, which were migrating to SQL 2008.
So, the DDL generated also includes statements to update the COMPATABILITY_LEVEL to 100.  Watch
out for this if you're intention is to run at a lower compatability level or if your target instance
of SQL is pre-2008.


To summarize.

If it's at all possible, create a blank database called DBA_Data.  Make sure you have SA rights.
Execute Script 0.  It will use the "DBA_Data" database.  Just execute the copy-and-pasted script.

Change the database to your desired source.
Execute script 1.  Save the output.
Execute script 2.  Save the output.
Execute script 3.  Copy and paste the results into a new window and execute.  Save THAT output.

On target box.  Execute output script 1, 2 & 3 in this order.
